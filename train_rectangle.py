'''
Created on Sep 14, 2018

@author: enerve
'''

import logging

from car import Car
from driver import *
from track import LineTrack
from epoch_trainer import EpochTrainer
from function import MultiPolynomialRegression
from function import QLookup
from function import NN_FA
from rectangle_feature_eng import RectangleFeatureEng
import cmd_line
import log
import util
import numpy as np
import random

def main():
    args = cmd_line.parse_args()

    util.init(args)
    util.pre_problem = 'RC rect'

    logger = logging.getLogger()
    log.configure_logger(logger, "RaceCar")
    logger.setLevel(logging.DEBUG)

    # -------------- Configure track
    
    points = [
            (120, 40),
            (210, 40),
            (210, 180),
            (30, 180),
            (30, 40)
        ]
    NUM_JUNCTURES = 50
    NUM_MILESTONES = 50
    NUM_LANES = 5
    MAX_SPEED = NUM_SPEEDS = 3
    NUM_DIRECTIONS = 20
    
    NUM_STEER_POSITIONS = 3
    NUM_ACCEL_POSITIONS = 3

    WIDTH = 20
    track = LineTrack(points, WIDTH, NUM_JUNCTURES, NUM_MILESTONES,
                      NUM_LANES)
    
    #util.draw_image(track.draw())
    
    car = Car(NUM_DIRECTIONS, NUM_SPEEDS)
    
    logger.debug("*Problem:\t%s", util.pre_problem)
    logger.debug("   NUM_JUNCTURES:\t%s", NUM_JUNCTURES)
    logger.debug("   NUM_MILESTONES:\t%s", NUM_MILESTONES)
    logger.debug("   NUM_LANES:\t%s", NUM_LANES)
    logger.debug("   MAX_SPEED:\t%s", MAX_SPEED)
    logger.debug("   NUM_DIRECTIONS:\t%s", NUM_DIRECTIONS)
    logger.debug("   NUM_STEER_POSITIONS:\t%s", NUM_STEER_POSITIONS)
    logger.debug("   NUM_ACCEL_POSITIONS:\t%s", NUM_ACCEL_POSITIONS)

    seed = 123
    random.seed(seed)
    np.random.seed(seed)

    # ------------------ Guide driver FA -----------------

    driver_fa = QLookup(0.2,  # alpha
                    NUM_JUNCTURES,
                    NUM_LANES,
                    NUM_SPEEDS,
                    NUM_DIRECTIONS,
                    NUM_STEER_POSITIONS,
                    NUM_ACCEL_POSITIONS)

#     driver_fe = RectangleFeatureEng(
#                     NUM_JUNCTURES,
#                     NUM_LANES,
#                     NUM_SPEEDS,
#                     NUM_DIRECTIONS,
#                     NUM_STEER_POSITIONS,
#                     NUM_ACCEL_POSITIONS)
# 
#     driver_fa = MultiPolynomialRegression(
#                     0.002, # alpha ... #4e-5 old alpha without batching
#                     0.005, # regularization constant
#                     256, # batch_size
#                     1000, # max_iterations
#                     0.000, # dampen_by
#                     driver_)

    # ------------------ Mimic FA -----------------
    mimic_fa = None
 
#     mimic_fe = RectangleFeatureEng(
#                     NUM_JUNCTURES,
#                     NUM_LANES,
#                     NUM_SPEEDS,
#                     NUM_DIRECTIONS,
#                     NUM_STEER_POSITIONS,
#                     NUM_ACCEL_POSITIONS,
#                     include_basis = True,
#                     include_sin_cosine = True,
#                     include_splines = True,
#                     spline_length = 4,
#                     include_corner_splines = True,
#                     corners = [0, 4, 15, 33, 44, 49],
#                     include_bounded_features = True,
#                     poly_degree = 2)
#   
#     mimic_fa = MultiPolynomialRegression(
#                     10.0, # alpha ... #4e-5 old alpha without batching
#                     0.0001, # regularization constant
#                     512, # batch_size
#                     3000, # max_iterations
#                     0.001, # dampen_by
#                     mimic_fe)
    
#     mimic_fe2 = RectangleFeatureEng(
#                     NUM_JUNCTURES,
#                     NUM_LANES,
#                     NUM_SPEEDS,
#                     NUM_DIRECTIONS,
#                     NUM_STEER_POSITIONS,
#                     NUM_ACCEL_POSITIONS)
#  
#     mimic_fa = NN_FA(
#                     0.000001, # alpha ... #4e-5 old alpha without batching
#                     1, # regularization constant
#                     512, # batch_size
#                     200, # max_iterations
#                     mimic_fe2)
     
    # ------------------ Guide driver RL algorithm ---------------

    driver = QLambdaFADriver(
                    0.8, #lambda
                    1, # gamma
                    200, # explorate
                    driver_fa,
                    NUM_JUNCTURES,
                    NUM_LANES,
                    NUM_SPEEDS,
                    NUM_DIRECTIONS,
                    NUM_STEER_POSITIONS,
                    NUM_ACCEL_POSITIONS,
                    mimic_fa)


    # ------------------ Student driver FA -----------------

#     student_fe = RectangleFeatureEng(
#                     NUM_JUNCTURES,
#                     NUM_LANES,
#                     NUM_SPEEDS,
#                     NUM_DIRECTIONS,
#                     NUM_STEER_POSITIONS,
#                     NUM_ACCEL_POSITIONS)
# 
#     student_fa = MultiPolynomialRegression(
#                     0.00001, # alpha ... #4e-5 old alpha without batching
#                     0.005, # regularization constant
#                     256, # batch_size
#                     100, # max_iterations
#                     0.000, # dampen_by
#                     student_fe)

    student_fe2 = RectangleFeatureEng(
                    NUM_JUNCTURES,
                    NUM_LANES,
                    NUM_SPEEDS,
                    NUM_DIRECTIONS,
                    NUM_STEER_POSITIONS,
                    NUM_ACCEL_POSITIONS)
 
    student_fa = NN_FA(
                    0.000001, # alpha ... #4e-5 old alpha without batching
                    1, # regularization constant
                    512, # batch_size
                    2000, # max_iterations
                    student_fe2)
    
    # ------------------ Student driver RL algorithm -------------
    student = None
# 
    student = QLambdaFAStudent(
                    0.8, #lambda
                    1, # gamma
                    student_fa,
                    NUM_JUNCTURES,
                    NUM_LANES,
                    NUM_SPEEDS,
                    NUM_DIRECTIONS,
                    NUM_STEER_POSITIONS,
                    NUM_ACCEL_POSITIONS,
                    None)
    
    
    
    # ------------------ Training -------------------
    
    util.start_interactive()

    #trainer = Trainer(driver, track, car)
    trainer = EpochTrainer(driver, track, car, student)
    
    #subdir = "215973_RC rect_DR_q_lambda_200_0.80_Qtable_a0.2_M_multipoly_a0.002_r0.005_b256_i200_d0.0000_F3tftt__"
    # 100 x 500 x 10 trained on top of above
    # subdir = "224148_RC rect_DR_q_lambda_200_0.80_Qtable_a0.2__ST_q_lambda_l0.80_multipoly_a1e-05_r0.005_b256_i100_d0.0000_F3tftt__"
    # driver.load_model(subdir)
    #trainer.load_stats(subdir)
    
    #trainer.train(100, 500, 1)
    trainer.train(10, 2000, 2)
    trainer.save_to_file()
    #mimic_fa.store_training_data("mimic")
    util.stop_interactive()

#     trainer.report_stats()
    
#     # Load poly training data and train
#     # 20000 episodes worth of training data, built upon 100 x 500 x 10 pretrain
#     subdir = "311066_RC rect_DR_q_lambda_200_0.80_Qtable_a0.2_M_multipoly_a0.0002_r0.005_b256_i100_d0.0000_F3tftt__"
#     mimic_fa.load_training_data("mimic", subdir)
#     #mimic_fa.describe_training_data()
#     mimic_fa.train()
#     mimic_fa.test()
#     mimic_fa.report_stats("mimic")


    t_R, b_E, _ = driver.run_best_episode(track, car, False)
    logger.debug("Driver best episode total R = %0.2f time=%d", t_R,
                 b_E.total_time_taken())
#     b_E.play_movie(pref="bestmovie")

    if driver.mimic_fa:
        t_R, b_E, _ = driver.run_best_episode(track, car, True)
        logger.debug("Mimic best episode total R = %0.2f time=%d", t_R,
                     b_E.total_time_taken())
        b_E.play_movie(pref="bestmovie_mimic")

    if student:
        t_R, b_E, _ = student.run_best_episode(track, car)
        student_fa.report_stats("student")
        logger.debug("Student best episode total R = %0.2f time=%d", t_R,
                 b_E.total_time_taken())
        b_E.play_movie(pref="bestmovie_student")

    # --------- CV ---------
    lambdas = []
    alphas = []
    scores = []
    expls = []
    
#     lambdas = [0.13695085128166884, 0.22235167815799461, 0.1004245197654009, 0.7319469627145233, 0.08401237895248181, 0.7154229655294181, 0.11704786725782723, 0.08111321945212513, 0.7426857788169445, 0.9142610703216371, 0.6428197806375433, 0.07180324712414232, 0.5221415877832428, 0.9153824227669348, 0.8842336037783853, 0.09890369803928767, 0.8379117757272975, 0.004640620395857775, 0.9395069975202808, 0.5933202359021731]
#     alphas = [0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97]
#     expls = [1.2, 1.37, 1.24, 1.94, 1.99, 1.80, 1.43, 1.95, 1.33, 1.85, 1.19, 1.78, 1.96, 1.53, 1.50, 1.50, 1.24, 1.17, 1.81, 1.73]
#     scores = [3232.244197077174, 3199.839930561113, 3189.670258906417, 3285.5060427449607, 3232.914152910709, 3223.8596860939115, 3244.7244100312882, 3174.4162590765927, 3189.2783154836607, 3187.018600211561, 3201.52428511787, 3241.57927273178, 3207.1571408789314, 3250.4862184850017, 3196.830740657496, 3248.7339757759096, 3176.9859134941626, 2842.13007819719, 3313.7745306324528, 3258.0419049956863]

#     lambdas = [0.035545649111000555, 0.3311569341784, 0.18683599167634468, 0.17433198160933583, 0.9413918108312151, 0.23819618360770067, 0.664498699533847, 0.7088018594445742, 0.7861995009616668, 0.17834858888517213, 0.0812053708147571, 0.3311569341784, 0.18683599167634468, 0.17433198160933583, 0.9413918108312151, 0.23819618360770067, 0.664498699533847, 0.7088018594445742, 0.7861995009616668, 0.17834858888517213]
#     alphas = [0.36457232497032854, 0.9232589290183271, 0.795233575659079, 0.8285387049012345, 0.8046923171363665, 0.4448517874473311, 0.8969222447495332, 0.6889227044820568, 0.6456376593063397, 0.20868749205136794, 0.3759942057201313, 0.9232589290183271, 0.795233575659079, 0.8285387049012345, 0.8046923171363665, 0.4448517874473311, 0.8969222447495332, 0.6889227044820568, 0.6456376593063397, 0.20868749205136794]
#     expls = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
#     scores = [210.0, 2264.0, 2890.0, 2694.0, 2190.0, 2872.0, 2684.0, 2840.0, 2686.0, 210.0, 210.0, 2264.0, 2890.0, 2694.0, 2190.0, 2872.0, 2684.0, 2840.0, 2686.0, 210.0]
       
# (root) DEBUG: lambdas: [0.035545649111000555, 0.3311569341784, 0.18683599167634468, 0.17433198160933583, 0.9413918108312151, 0.23819618360770067, 0.664498699533847, 0.7088018594445742, 0.7861995009616668, 0.17834858888517213, 0.0812053708147571, 0.3311569341784, 0.18683599167634468, 0.17433198160933583, 0.9413918108312151, 0.23819618360770067, 0.664498699533847, 0.7088018594445742, 0.7861995009616668, 0.17834858888517213, 0.830141794844961, 0.3504293344136622, 0.26231679688763143, 0.03604026362455515, 0.23694074896963313, 0.13879788192298792, 0.43858077567907827, 0.9288751249423873, 0.8927903326102465, 0.38996648047426097, 0.7450310082201976, 0.6466485793642853, 0.8655598394262906, 0.6505374815366626, 0.25834678356103813, 0.2543230000145259, 0.5758555211747061, 0.5934063455836321, 0.016231439864941244, 0.5979112366902357]
# (root) DEBUG: alphas : [0.36457232497032854, 0.9232589290183271, 0.795233575659079, 0.8285387049012345, 0.8046923171363665, 0.4448517874473311, 0.8969222447495332, 0.6889227044820568, 0.6456376593063397, 0.20868749205136794, 0.3759942057201313, 0.9232589290183271, 0.795233575659079, 0.8285387049012345, 0.8046923171363665, 0.4448517874473311, 0.8969222447495332, 0.6889227044820568, 0.6456376593063397, 0.20868749205136794, 0.3763087875991983, 0.11723146597218403, 0.13029575512478808, 0.06806941290721957, 0.4967164136114163, 0.35597154720468915, 0.7713883940121972, 0.48209885275703457, 0.6682850806490724, 0.15240951325211072, 0.03047410701959885, 0.8958401495904972, 0.29144470388734445, 0.5297386735566204, 0.5712772517761141, 0.9299279914757403, 0.6372345391887758, 0.40899617721631953, 0.560416441507487, 0.3931206020625714]
# (root) DEBUG: expls  : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
# (root) DEBUG: scores : [210.0, 2264.0, 2890.0, 2694.0, 2190.0, 2872.0, 2684.0, 2840.0, 2686.0, 210.0, 210.0, 2264.0, 2890.0, 2694.0, 2190.0, 2872.0, 2684.0, 2840.0, 2686.0, 210.0, 2934.0, 210.0, 2710.0, 210.0, 210.0, 210.0, 210.0, 210.0, 2346.0, 210.0, 210.0, 210.0, 2612.0, 2870.0, 2954.0, 2670.0, 210.0, 2628.0, 2910.0, 210.0]

# (root) DEBUG: lambdas: [0.13519077007095304, 0.45673492270006777, 0.9894051054117898, 0.6443294641941101, 0.5868559990307428, 0.17197764511529712, 0.7802887383857542, 0.6811626027746415, 0.5983000635320207, 0.04536458559210821, 0.1198370949377322, 0.5664557944247841, 0.3452013618879357, 0.45751727116759666, 0.3862102550659755, 0.4011261107890167, 0.34986976953505866, 0.5297597043381613, 0.23339845337834997, 0.9696784422080201, 0.4733366035530734, 0.2558560201190979, 0.39091468974559673, 0.6729202557966807, 0.20815810739364593, 0.9153343821958776, 0.6013402146656762, 0.7022103931075303, 0.18357037467795068, 0.36510590051831904, 0.7204410661892424, 0.3859717605342766, 0.03237039675759912, 0.566461867001969, 0.03808964361623168, 0.7667698150472159, 0.915302504444149, 0.6478081067195336, 0.6653993071339167, 0.3950873806143781, 0.39915477390910714, 0.39984677688871473, 0.892809852309869, 0.6421727567546326, 0.4662937221593896, 0.7646419228780885, 0.24508927663183455, 0.06490009757967974, 0.6170076601094739, 0.9617182819412516, 0.5713922749075359, 0.2253066592468982, 0.6627375318659345, 0.8632749097067131, 0.6139283503824237, 0.29234055448860663, 0.8523536043612602, 0.24074680581825691, 0.19041353664564087, 0.1134505645203403, 0.5638231022013275, 0.5578602927627953, 0.3260808272572049, 0.21562776848555132, 0.24344079111662376, 0.4224636950582057, 0.5314619894041245, 0.6458075654526565, 0.38355688582559444, 0.11622591826006834, 0.18154806799895695, 0.5015678894543131, 0.9584922105687449, 0.17089324628363523, 0.2523731544124662, 0.5771387649024021, 0.917333175544797, 0.19854275758646633, 0.5965325238980879, 0.9883667800012237, 0.598075691840853, 0.7473863392680455, 0.2289786611227067, 0.2760506510868884, 0.11587952160364234, 0.5736089152364887, 0.8162113577634619, 0.926031345779164, 0.27039154119313014, 0.33997069207765906, 0.816000075843417, 0.14615775111074336, 0.2831294953317769, 0.7577632733801346, 0.6513339663194367, 0.31280933342081374, 0.9948174415506701, 0.38816014138496757, 0.45257466795244505, 0.6400531692673013]
# (root) DEBUG: alphas : [0.7681710972342894, 0.06871271763062292, 0.17832608956721374, 0.26165446258202285, 0.06458875937854869, 0.6812268197859157, 0.8578075151247831, 0.2964921916726614, 0.48071744028636076, 0.16019857279466998, 0.044738052937224215, 0.592942739077713, 0.4116176227101631, 0.41982453963324884, 0.1051754416701205, 0.1854353646498451, 0.9873174871079378, 0.28297404350502375, 0.43937413221661703, 0.22792015144458777, 0.8401772541329021, 0.48262912972061356, 0.028381939934643774, 0.3252238882551688, 0.45537275236018016, 0.5833330860035122, 0.31011396728006413, 0.012539243105551323, 0.09490375976628684, 0.8358256715723481, 0.6416391695139256, 0.5112210610494123, 0.9176294724779422, 0.9785206243570874, 0.9471850805046773, 0.5779181378535051, 0.5618841933486195, 0.9919689925902779, 0.1498975178228421, 0.017245684771120318, 0.7575082085445451, 0.22331145795392537, 0.6442284387069368, 0.08848745175390382, 0.6736622505876187, 0.6272794385133473, 0.862323759797343, 0.37023972070140976, 0.002734541406780311, 0.5873303197860414, 0.22479895963670082, 0.7220563134784186, 0.149891719174569, 0.17564452667275499, 0.8906447787913042, 0.18257656713648063, 0.6291946244897039, 0.02072058414088307, 0.25505365739023567, 0.21526787986418439, 0.9775555627108109, 0.6238469039384013, 0.6565829525955721, 0.7938752346183725, 0.12373738277228963, 0.44563580356789845, 0.06480059633538249, 0.3517876227946043, 0.8856515214970835, 0.4734024743910634, 0.17942905519547747, 0.026535924152498613, 0.39816835258480987, 0.41961208583873577, 0.5478712297504181, 0.12331891158783592, 0.19988453955893049, 0.7261070104323301, 0.02635398679498524, 0.8869556811774616, 0.6390617291716778, 0.37309527531422315, 0.8837891973369121, 0.41882219063776227, 0.110637191884421, 0.040815452752390735, 0.23467158660988774, 0.3814045680913558, 0.05293444659159208, 0.8193039774446809, 0.28237937621126274, 0.32665741421345584, 0.8061867083432728, 0.5981229762255301, 0.43035892589386404, 0.12915561199436643, 0.8850811664442959, 0.7626317994852813, 0.754067906657315, 0.3856739582859404]
# (root) DEBUG: expls  : [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]
# (root) DEBUG: scores : [1518.0, 1922.0, 2304.0, 1368.0, 1830.0, 1522.0, 1534.0, 1772.0, 1888.0, 1934.0, 960.0, 2092.0, 1974.0, 1342.0, 2044.0, 1508.0, 1642.0, 1810.0, 1972.0, 1952.0, 1198.0, 1796.0, 190.0, 2036.0, 1854.0, 1732.0, 1804.0, 1370.0, 210.0, 1444.0, 2394.0, 1714.0, 1272.0, 1880.0, 1482.0, 1954.0, 2008.0, 2124.0, 1938.0, 740.0, 1728.0, 1826.0, 2156.0, 2002.0, 1362.0, 1706.0, 1646.0, 1828.0, 210.0, 2236.0, 1746.0, 1678.0, 1714.0, 1576.0, 1838.0, 210.0, 1704.0, 190.0, 1756.0, 2038.0, 1414.0, 2154.0, 1660.0, 1660.0, 210.0, 1594.0, 1850.0, 1878.0, 1496.0, 1430.0, 2174.0, 210.0, 1534.0, 1588.0, 1906.0, 210.0, 1498.0, 1946.0, 210.0, 1558.0, 1686.0, 1554.0, 1726.0, 1934.0, 210.0, 190.0, 210.0, 210.0, 210.0, 2030.0, 1588.0, 1888.0, 1600.0, 1884.0, 2072.0, 210.0, 1208.0, 1852.0, 1650.0, 1992.0]
# 

#50k runs
#     lambdas.extend([0.4369944109130759, 0.10049324191259024, 0.26017632037248395, 0.9913741335265709, 0.33029461138276084, 0.9864428791790305, 0.25990660674568833, 0.5602886512952312, 0.9203462874001832, 0.5129374601792989])
#     alphas.extend([0.8716452207253389, 0.8864937036743159, 0.7491351709831013, 0.665211537300151, 0.6971833451914132, 0.6392139440914296, 0.9706347207164407, 0.7109492816224796, 0.9325064739773693, 0.7016163840005845])
#     expls.extend([49.94178613818089, 157.00271196623905, 352.5909892621482, 649.5114486438251, 76.17151797246133, 26.158977160632276, 172.18333878172615, 35.34169200056338, 136.78238484996433, 482.48762047955915])
#     scores.extend([2912.0, 2794.0, 2440.0, 1630.0, 2966.0, 2522.0, 2718.0, 2900.0, 2520.0, 2424.0])
#     
#     lambdas.extend([0.4652372332353094, 0.5067551002803498, 0.5907238132759225, 0.20874455925678415, 0.22118568317559528, 0.2587244842398343, 0.013079589293472305, 0.91331634164772, 0.16912821858830884, 0.5184993769992815, 0.12161827805335068, 0.9902045587509267, 0.16707347434272213, 0.6765506526753898, 0.8069948073463206, 0.9588837128867654, 0.7013263994146809, 0.24960313743880214, 0.5477968213765543, 0.4073676772469781])
#     alphas.extend([0.8176686767127468, 0.7231356045881832, 0.39754441896267956, 0.4339498402615556, 0.9707054232150758, 0.5559600661951928, 0.8380596430718179, 0.4079124594267327, 0.212593899367546, 0.61494798302087, 0.3963678965706824, 0.6276246745183556, 0.8773318786946018, 0.21657442540065405, 0.20909479314419732, 0.8866919392201233, 0.3058283415219267, 0.4613166166739424, 0.7107188040048973, 0.8988832064984167])
#     expls.extend([23.9335263931481, 440.4818664059916, 10.124898424913152, 524.9047578354381, 22.588123005604004, 13.872078466905137, 102.6585702784042, 285.51422345946315, 36.86532778831967, 15.620351176820039, 306.24292163282405, 630.2284923795057, 77.7807288202881, 22.363435778558898, 81.56145794825315, 370.0263336225798, 355.9222197629789, 73.52282333353766, 557.0399952700474, 120.93403385275411])
#     scores.extend([2924.0, 2186.0, 190.0, 2174.0, 210.0, 2680.0, 2934.0, 2686.0, 210.0, 210.0, 2794.0, 1958.0, 2948.0, 210.0, 210.0, 1944.0, 2518.0, 2938.0, 2206.0, 2922.0])


#     for rep in range(20):
#         lam = random.random() 
#         alp = random.uniform(0.3, 1.0)
#         expl = 10 ** random.uniform(1.0, 3)
#         logger.debug("--- rep %d --- lam: %0.2f, alp: %0.2f, expl: %0.2f", 
#                      rep, lam, alp, expl)
#         
#         driver = QLambdaDriver(lam, # lambda
#                         alp, # alpha
#                         1, # gamma
#                         expl, # explorate
#                         NUM_JUNCTURES,
#                         NUM_LANES,
#                         NUM_SPEEDS,
#                         NUM_DIRECTIONS,
#                         NUM_STEER_POSITIONS,
#                         NUM_ACCEL_POSITIONS)
#         trainer = Trainer(driver, track, car)
#         bp_times, e_bp, bp_R, bp_j = trainer.train(20*1000, save_to_file=False,
#                                              seed = 513 + rep)
#         #bp_R=[random.randrange(20, 1000)]
#                 
#         lambdas.append(lam)
#         alphas.append(alp)
#         expls.append(expl)
#                
#         score = 0
#         for i in range(5):
#             score += bp_R[-1-i] / bp_j[-1-i]
#         score /= 5
#         scores.append(score)
#         logger.debug("  Score: %s", score)
#             
#  
#  
#         logger.debug("lambdas.extend( %s)", lambdas)
#         logger.debug("alphas.extend(  %s)", alphas)
#         logger.debug("expls.extend(   %s)", expls)
#         logger.debug("scores.extend(  %s)", scores)
#        
#     util.scatter(np.array(lambdas), np.array(alphas), np.array(scores),
#                  "lambda", "alpha", pref="cv_la")
#     util.scatter(np.array(lambdas), np.array(expls), np.array(scores),
#                  "lambda", "expl", pref="cv_le")
#     util.scatter(np.array(expls), np.array(alphas), np.array(scores),
#                  "expl", "alpha", pref="cv_ea")
# #     util.scatter(np.array(lambdas), np.array(expls), np.array(scores),
# #                  "lambda", "log(expl)", pref="cv")
     
    
#     explorates = [50, 100, 200, 400, 800]
#     stats_bp_times = []
#     stats_e_bp = []
#     stats_labels = []
#     num_episodes = 60 * 1000
#     for explorate in explorates:
#         logger.debug("--- Explorate=%d ---" % explorate)
#         #for i in range(3):
#         i=0
#         seed = (100 + 53*i)
#         pref = "%d_%d" % (explorate, seed)
#         driver = QDriver(1, # alpha
#                         1, # gamma
#                         explorate, # explorate
#                         NUM_JUNCTURES,
#                         NUM_LANES,
#                         NUM_SPEEDS,
#                         NUM_DIRECTIONS,
#                         NUM_STEER_POSITIONS,
#                         NUM_ACCEL_POSITIONS)
#         stat_bestpath_times, stat_e_bp = \
#             trainer.train(driver, track, car, num_episodes, seed=seed, pref=pref)
#         stats_bp_times.append(stat_bestpath_times)
#         stats_e_bp.append(stat_e_bp)
#         stats_labels.append("N0=%d seed=%d" % (explorate, seed))
#         logger.debug("bestpath: %s", stat_bestpath_times)
#         logger.debug("stat_e: %s", stat_e_bp)
#         trainer.play_best(driver, track, car, should_play_movie=False,
#                           pref=pref)
#     util.plot_all(stats_bp_times, stats_e_bp, stats_labels,
#                   title="Time taken by best path as of epoch", pref="BestTimeTaken")

if __name__ == '__main__':
    main()
